package co.blocke.scalajack2
package codec

import model.*

import java.lang.reflect.Method
import scala.annotation.switch

case class SeqCodec[ELEM,TO](builderMethod: Method,
                             companionInstance:  Object,
                             elementDecoder: Decoder[ELEM],
                             elementEncoder: Encoder[ELEM]) extends Codec[TO]:

  val decoder: Decoder[TO] = new Decoder[TO] {
    private var arrayDone         = false
    private val builder           = builderMethod.invoke(companionInstance).asInstanceOf[scala.collection.mutable.Builder[ELEM,TO]]

    override def reset(): Unit =
      builder.clear()
      arrayDone = false

    def emit(token: ParseToken, parser: Parser): Either[EmitResult, TO] =
      if arrayDone then
        error("Unexpected content after array end", parser)
      else
        (token: @switch) match {
          case ParseToken.ARRAYSTART =>
            this.reset()
            if !elementDecoder.isPrimitive then
              parser.setDecoder(elementDecoder)
            Left(EmitResult.ACCEPTED)
          case ParseToken.NULL =>
            arrayDone = true
            Right(null.asInstanceOf[TO])
          case _ =>
            // Handle primitive encoders--don't bother with all the re-setting decoder drama
            (elementDecoder.emit(token, parser): @switch) match {
              case Right(cooked) =>
                builder += cooked
                Left(EmitResult.ACCEPTED)
              case Left(EmitResult.REJECTED) =>
                if token == ParseToken.ARRAYEND then
                  arrayDone = true
                  Right(builder.result())
                else
                  error("Unexpected token "+token, parser)
            }
        }

  val encoder: Encoder[TO] = new Encoder[TO] {
    def encode(payload: TO, writer: Writer[_]): Unit =
      if payload == null then
        writer.writeNull()
      else
        writer.writeArray[ELEM](payload.asInstanceOf[Seq[ELEM]].toList, elementEncoder)
  }
